---
title: "Getting started with R"
author: Muhammad Hasham
date: today
format: html
---

### Exercise 1 {#sec-1}

* Create a vector of the letters A, B and C.

```{r}
# Your answer in code

letters_vec <- c("A", "B", "C")

```
> Your answer as text



* Assign the vector to a variable `my_letters`
```{r}
# Your answer in code
my_letters <- letters_vec

```


* Check the what happens when you run `letters` (just this) on the command line.
```{r}
# Your answer in code
letters
```

> Your answer as text



* What happens when you concatenate two vectors? Add `c(my_letters , my_letters)`
```{r}
# Your answer in code
c(my_letters,my_letters)

```

> Your answer as text



* Add the number 1 to letters. What happens to the type of the vector?
```{r}
# Your answer in code
letters_vec <- c("A", "B", "C")
new_vec <- c(letters_vec, 1)
new_vec



```

> Your answer as text



### Exercise 2


1. Create a vector `my_vec` with the numbers from 1 through 8.
2. Apply the operation `+2` to the vector/
3. Add the vector containing 1, 2, 3, 4 to `my_vec`. What do you observe?

```{r}
# Your answer in code

my_vec <- c(1:8)
my_vec2 <- my_vec +2
my_vec2

vec <- c(1,2,3,4)

final <- vec + my_vec
final




```



### Exercise 3

* Consider the R output of the matrix below:

```
 [,1] [,2]
 [1,]    4    1
 [2,]    9    5
 [3,]   10    7
```

1. What was one of the correct commands used to write this matrix?
2. Assign the matrix as `A`
3. Check the dimensions
4. Extract the element `5`
5. Add the vector `c(0,0,0)` as a new column and update `A`
6. Modify the element 4 to `0`
7. Compute the transpose of `A`

```{r}
# Your answer in code

matrix(c(4, 9, 10, 1, 5, 7), nrow = 3, ncol = 2)

A <- matrix(c(4, 9, 10, 1, 5, 7), nrow = 3, ncol = 2)
A
dimention <- dim(A)
dimention

extract5 <- A[2,2]
extract5

new_col <- c(0,0,0)

update_matrix <- cbind(A,c(0,0,0))
print(update_matrix)

update_matrix[1,1] <-0

update_matrix

transposed_matrix <- t(update_matrix)

transposed_matrix
```


8. Are any values in `A` larger than 10? 
```{r}
# Your answer in code

any_larger_than_10 <- any(A > 10)


print(any_larger_than_10)
  

```

9. Are all values in `A` smaller than 10?
```{r}
# Your answer in code
any_smaller_than_10 <- any(A < 10)


print(any_smaller_than_10)

```

### Exercise 4

1. Create a function that sums up two values even if provided as characters values

```{r}
# Your answer in code

sum <- function(a,b){
  a_num <- as.numeric(a)
  b_num <- as.numeric(b)
  
  if(is.na(a_num) | is.na(b_num)){
    return(" any number is not numeric")
  }
  return(a_num + b_num)
  
}
print(sum(2,3))
print(sum("2","3"))
print(sum("2","abc"))





```


### Exercise 5

1. Create a function that returns the mean, median and standard deviation.

```{r}
# Your answer in code

code_mms <- function(x){
  if(is.numeric(c)){
    return("number should be numeric form")
  }
  
  mean_value<- mean(x,na.rm =TRUE)
  median_value <- median(x,na.rm = TRUE)
  standard_value <- sd(x,na.rm = TRUE)
  
  return(list(mean_value,median_value,standard_value))
}

data <-c(10,20,30,40,50)
result <- code_mms(data)
print(result)



```


### Exercise 6
1. Create a pipe statement that counts the number of NAs in vector containing numbers, characters and missing values.
The output of `c('1' , "a", NA, "2", NA)` should be 2.

```{r}
# Your answer in code

library(dplyr)
 

data <- c('1',"2",NA,"2",NA)

nas<- data %>%
  is.na() %>%
  base::sum()


print(nas)
```


